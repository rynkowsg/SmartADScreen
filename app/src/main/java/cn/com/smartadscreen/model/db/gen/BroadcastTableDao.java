package cn.com.smartadscreen.model.db.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import cn.com.smartadscreen.model.db.entity.BroadcastTable;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BROADCAST_TABLE".
*/
public class BroadcastTableDao extends AbstractDao<BroadcastTable, Long> {

    public static final String TABLENAME = "BROADCAST_TABLE";

    /**
     * Properties of entity BroadcastTable.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property BtId = new Property(1, String.class, "btId", false, "BT_ID");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property Resolution = new Property(3, String.class, "resolution", false, "RESOLUTION");
        public final static Property AppType = new Property(4, String.class, "appType", false, "APP_TYPE");
        public final static Property Finished = new Property(5, boolean.class, "finished", false, "FINISHED");
        public final static Property DownloadKey = new Property(6, String.class, "downloadKey", false, "DOWNLOAD_KEY");
        public final static Property Content = new Property(7, String.class, "content", false, "CONTENT");
        public final static Property Logo = new Property(8, String.class, "logo", false, "LOGO");
        public final static Property ComeFrom = new Property(9, String.class, "comeFrom", false, "COME_FROM");
        public final static Property CreateDate = new Property(10, java.util.Date.class, "createDate", false, "CREATE_DATE");
        public final static Property ModifyDate = new Property(11, java.util.Date.class, "modifyDate", false, "MODIFY_DATE");
        public final static Property TimeType = new Property(12, String.class, "timeType", false, "TIME_TYPE");
        public final static Property IsNeedDelay = new Property(13, Boolean.class, "isNeedDelay", false, "IS_NEED_DELAY");
    }

    private DaoSession daoSession;


    public BroadcastTableDao(DaoConfig config) {
        super(config);
    }
    
    public BroadcastTableDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BROADCAST_TABLE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"BT_ID\" TEXT," + // 1: btId
                "\"NAME\" TEXT," + // 2: name
                "\"RESOLUTION\" TEXT," + // 3: resolution
                "\"APP_TYPE\" TEXT," + // 4: appType
                "\"FINISHED\" INTEGER NOT NULL ," + // 5: finished
                "\"DOWNLOAD_KEY\" TEXT," + // 6: downloadKey
                "\"CONTENT\" TEXT," + // 7: content
                "\"LOGO\" TEXT," + // 8: logo
                "\"COME_FROM\" TEXT," + // 9: comeFrom
                "\"CREATE_DATE\" INTEGER," + // 10: createDate
                "\"MODIFY_DATE\" INTEGER," + // 11: modifyDate
                "\"TIME_TYPE\" TEXT," + // 12: timeType
                "\"IS_NEED_DELAY\" INTEGER);"); // 13: isNeedDelay
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BROADCAST_TABLE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, BroadcastTable entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String btId = entity.getBtId();
        if (btId != null) {
            stmt.bindString(2, btId);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String resolution = entity.getResolution();
        if (resolution != null) {
            stmt.bindString(4, resolution);
        }
 
        String appType = entity.getAppType();
        if (appType != null) {
            stmt.bindString(5, appType);
        }
        stmt.bindLong(6, entity.getFinished() ? 1L: 0L);
 
        String downloadKey = entity.getDownloadKey();
        if (downloadKey != null) {
            stmt.bindString(7, downloadKey);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(8, content);
        }
 
        String logo = entity.getLogo();
        if (logo != null) {
            stmt.bindString(9, logo);
        }
 
        String comeFrom = entity.getComeFrom();
        if (comeFrom != null) {
            stmt.bindString(10, comeFrom);
        }
 
        java.util.Date createDate = entity.getCreateDate();
        if (createDate != null) {
            stmt.bindLong(11, createDate.getTime());
        }
 
        java.util.Date modifyDate = entity.getModifyDate();
        if (modifyDate != null) {
            stmt.bindLong(12, modifyDate.getTime());
        }
 
        String timeType = entity.getTimeType();
        if (timeType != null) {
            stmt.bindString(13, timeType);
        }
 
        Boolean isNeedDelay = entity.getIsNeedDelay();
        if (isNeedDelay != null) {
            stmt.bindLong(14, isNeedDelay ? 1L: 0L);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, BroadcastTable entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String btId = entity.getBtId();
        if (btId != null) {
            stmt.bindString(2, btId);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String resolution = entity.getResolution();
        if (resolution != null) {
            stmt.bindString(4, resolution);
        }
 
        String appType = entity.getAppType();
        if (appType != null) {
            stmt.bindString(5, appType);
        }
        stmt.bindLong(6, entity.getFinished() ? 1L: 0L);
 
        String downloadKey = entity.getDownloadKey();
        if (downloadKey != null) {
            stmt.bindString(7, downloadKey);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(8, content);
        }
 
        String logo = entity.getLogo();
        if (logo != null) {
            stmt.bindString(9, logo);
        }
 
        String comeFrom = entity.getComeFrom();
        if (comeFrom != null) {
            stmt.bindString(10, comeFrom);
        }
 
        java.util.Date createDate = entity.getCreateDate();
        if (createDate != null) {
            stmt.bindLong(11, createDate.getTime());
        }
 
        java.util.Date modifyDate = entity.getModifyDate();
        if (modifyDate != null) {
            stmt.bindLong(12, modifyDate.getTime());
        }
 
        String timeType = entity.getTimeType();
        if (timeType != null) {
            stmt.bindString(13, timeType);
        }
 
        Boolean isNeedDelay = entity.getIsNeedDelay();
        if (isNeedDelay != null) {
            stmt.bindLong(14, isNeedDelay ? 1L: 0L);
        }
    }

    @Override
    protected final void attachEntity(BroadcastTable entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public BroadcastTable readEntity(Cursor cursor, int offset) {
        BroadcastTable entity = new BroadcastTable( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // btId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // resolution
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // appType
            cursor.getShort(offset + 5) != 0, // finished
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // downloadKey
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // content
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // logo
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // comeFrom
            cursor.isNull(offset + 10) ? null : new java.util.Date(cursor.getLong(offset + 10)), // createDate
            cursor.isNull(offset + 11) ? null : new java.util.Date(cursor.getLong(offset + 11)), // modifyDate
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // timeType
            cursor.isNull(offset + 13) ? null : cursor.getShort(offset + 13) != 0 // isNeedDelay
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, BroadcastTable entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setBtId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setResolution(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAppType(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setFinished(cursor.getShort(offset + 5) != 0);
        entity.setDownloadKey(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setContent(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setLogo(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setComeFrom(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setCreateDate(cursor.isNull(offset + 10) ? null : new java.util.Date(cursor.getLong(offset + 10)));
        entity.setModifyDate(cursor.isNull(offset + 11) ? null : new java.util.Date(cursor.getLong(offset + 11)));
        entity.setTimeType(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setIsNeedDelay(cursor.isNull(offset + 13) ? null : cursor.getShort(offset + 13) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(BroadcastTable entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(BroadcastTable entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(BroadcastTable entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
