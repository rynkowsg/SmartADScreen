package cn.com.smartadscreen.model.db.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import cn.com.smartadscreen.model.db.entity.DownloadTable;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DOWNLOAD_TABLE".
*/
public class DownloadTableDao extends AbstractDao<DownloadTable, Long> {

    public static final String TABLENAME = "DOWNLOAD_TABLE";

    /**
     * Properties of entity DownloadTable.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Url = new Property(1, String.class, "url", false, "URL");
        public final static Property Size = new Property(2, String.class, "size", false, "SIZE");
        public final static Property FileName = new Property(3, String.class, "fileName", false, "FILE_NAME");
        public final static Property FilePath = new Property(4, String.class, "filePath", false, "FILE_PATH");
        public final static Property Hash = new Property(5, String.class, "hash", false, "HASH");
        public final static Property Hash2 = new Property(6, String.class, "hash2", false, "HASH2");
        public final static Property Progress = new Property(7, Integer.class, "progress", false, "PROGRESS");
        public final static Property ErrorCode = new Property(8, Integer.class, "errorCode", false, "ERROR_CODE");
        public final static Property AddTime = new Property(9, Long.class, "addTime", false, "ADD_TIME");
        public final static Property Origin = new Property(10, Integer.class, "origin", false, "ORIGIN");
    }


    public DownloadTableDao(DaoConfig config) {
        super(config);
    }
    
    public DownloadTableDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DOWNLOAD_TABLE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"URL\" TEXT," + // 1: url
                "\"SIZE\" TEXT," + // 2: size
                "\"FILE_NAME\" TEXT," + // 3: fileName
                "\"FILE_PATH\" TEXT," + // 4: filePath
                "\"HASH\" TEXT," + // 5: hash
                "\"HASH2\" TEXT," + // 6: hash2
                "\"PROGRESS\" INTEGER," + // 7: progress
                "\"ERROR_CODE\" INTEGER," + // 8: errorCode
                "\"ADD_TIME\" INTEGER," + // 9: addTime
                "\"ORIGIN\" INTEGER);"); // 10: origin
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DOWNLOAD_TABLE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DownloadTable entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(2, url);
        }
 
        String size = entity.getSize();
        if (size != null) {
            stmt.bindString(3, size);
        }
 
        String fileName = entity.getFileName();
        if (fileName != null) {
            stmt.bindString(4, fileName);
        }
 
        String filePath = entity.getFilePath();
        if (filePath != null) {
            stmt.bindString(5, filePath);
        }
 
        String hash = entity.getHash();
        if (hash != null) {
            stmt.bindString(6, hash);
        }
 
        String hash2 = entity.getHash2();
        if (hash2 != null) {
            stmt.bindString(7, hash2);
        }
 
        Integer progress = entity.getProgress();
        if (progress != null) {
            stmt.bindLong(8, progress);
        }
 
        Integer errorCode = entity.getErrorCode();
        if (errorCode != null) {
            stmt.bindLong(9, errorCode);
        }
 
        Long addTime = entity.getAddTime();
        if (addTime != null) {
            stmt.bindLong(10, addTime);
        }
 
        Integer origin = entity.getOrigin();
        if (origin != null) {
            stmt.bindLong(11, origin);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DownloadTable entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(2, url);
        }
 
        String size = entity.getSize();
        if (size != null) {
            stmt.bindString(3, size);
        }
 
        String fileName = entity.getFileName();
        if (fileName != null) {
            stmt.bindString(4, fileName);
        }
 
        String filePath = entity.getFilePath();
        if (filePath != null) {
            stmt.bindString(5, filePath);
        }
 
        String hash = entity.getHash();
        if (hash != null) {
            stmt.bindString(6, hash);
        }
 
        String hash2 = entity.getHash2();
        if (hash2 != null) {
            stmt.bindString(7, hash2);
        }
 
        Integer progress = entity.getProgress();
        if (progress != null) {
            stmt.bindLong(8, progress);
        }
 
        Integer errorCode = entity.getErrorCode();
        if (errorCode != null) {
            stmt.bindLong(9, errorCode);
        }
 
        Long addTime = entity.getAddTime();
        if (addTime != null) {
            stmt.bindLong(10, addTime);
        }
 
        Integer origin = entity.getOrigin();
        if (origin != null) {
            stmt.bindLong(11, origin);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DownloadTable readEntity(Cursor cursor, int offset) {
        DownloadTable entity = new DownloadTable( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // url
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // size
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // fileName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // filePath
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // hash
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // hash2
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // progress
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // errorCode
            cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9), // addTime
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10) // origin
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DownloadTable entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUrl(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSize(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setFileName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setFilePath(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setHash(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setHash2(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setProgress(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setErrorCode(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setAddTime(cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9));
        entity.setOrigin(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DownloadTable entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DownloadTable entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DownloadTable entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
